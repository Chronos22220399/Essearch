#pragma once

// generated by /usr/local/bin/sqlpp11-ddl2cpp ddl/news.ddl include/News News

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace News
{
  namespace New_
  {
    struct NewId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "new_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T newId;
            T& operator()() { return newId; }
            const T& operator()() const { return newId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Title
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "title";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T title;
            T& operator()() { return title; }
            const T& operator()() const { return title; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct AuthorPhotor
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "author_photor";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T authorPhotor;
            T& operator()() { return authorPhotor; }
            const T& operator()() const { return authorPhotor; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Referring
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "referring";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T referring;
            T& operator()() { return referring; }
            const T& operator()() const { return referring; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Source
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "source";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T source;
            T& operator()() { return source; }
            const T& operator()() const { return source; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct ClickedCnt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "clicked_cnt";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T clickedCnt;
            T& operator()() { return clickedCnt; }
            const T& operator()() const { return clickedCnt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Editor
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "editor";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T editor;
            T& operator()() { return editor; }
            const T& operator()() const { return editor; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Content
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "content";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T content;
            T& operator()() { return content; }
            const T& operator()() const { return content; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Url
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "url";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T url;
            T& operator()() { return url; }
            const T& operator()() const { return url; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace New_

  struct New: sqlpp::table_t<New,
               New_::NewId,
               New_::Title,
               New_::AuthorPhotor,
               New_::Referring,
               New_::Source,
               New_::ClickedCnt,
               New_::Editor,
               New_::Content,
               New_::Url>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "New";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T New;
        T& operator()() { return New; }
        const T& operator()() const { return New; }
      };
    };
  };
} // namespace News
