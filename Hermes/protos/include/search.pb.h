// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: search.proto
// Protobuf C++ Version: 5.29.2

#ifndef search_2eproto_2epb_2eh
#define search_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_search_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_search_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_search_2eproto;
class GetNewsRequest;
struct GetNewsRequestDefaultTypeInternal;
extern GetNewsRequestDefaultTypeInternal _GetNewsRequest_default_instance_;
class GetNewsResponse;
struct GetNewsResponseDefaultTypeInternal;
extern GetNewsResponseDefaultTypeInternal _GetNewsResponse_default_instance_;
class SearchRequest;
struct SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
class SearchResponse;
struct SearchResponseDefaultTypeInternal;
extern SearchResponseDefaultTypeInternal _SearchResponse_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum SearchMode : int {
  Normal = 0,
  Advanced = 1,
  SearchMode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SearchMode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SearchMode_IsValid(int value);
extern const uint32_t SearchMode_internal_data_[];
constexpr SearchMode SearchMode_MIN = static_cast<SearchMode>(0);
constexpr SearchMode SearchMode_MAX = static_cast<SearchMode>(1);
constexpr int SearchMode_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
SearchMode_descriptor();
template <typename T>
const std::string& SearchMode_Name(T value) {
  static_assert(std::is_same<T, SearchMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SearchMode_Name().");
  return SearchMode_Name(static_cast<SearchMode>(value));
}
template <>
inline const std::string& SearchMode_Name(SearchMode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SearchMode_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool SearchMode_Parse(absl::string_view name, SearchMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SearchMode>(
      SearchMode_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class SearchResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:SearchResponse) */ {
 public:
  inline SearchResponse() : SearchResponse(nullptr) {}
  ~SearchResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SearchResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SearchResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SearchResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline SearchResponse(const SearchResponse& from) : SearchResponse(nullptr, from) {}
  inline SearchResponse(SearchResponse&& from) noexcept
      : SearchResponse(nullptr, std::move(from)) {}
  inline SearchResponse& operator=(const SearchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchResponse& operator=(SearchResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchResponse* internal_default_instance() {
    return reinterpret_cast<const SearchResponse*>(
        &_SearchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(SearchResponse& a, SearchResponse& b) { a.Swap(&b); }
  inline void Swap(SearchResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SearchResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SearchResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SearchResponse& from) { SearchResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SearchResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "SearchResponse"; }

 protected:
  explicit SearchResponse(::google::protobuf::Arena* arena);
  SearchResponse(::google::protobuf::Arena* arena, const SearchResponse& from);
  SearchResponse(::google::protobuf::Arena* arena, SearchResponse&& from) noexcept
      : SearchResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDocIdsFieldNumber = 1,
  };
  // repeated int32 docIds = 1;
  int docids_size() const;
  private:
  int _internal_docids_size() const;

  public:
  void clear_docids() ;
  ::int32_t docids(int index) const;
  void set_docids(int index, ::int32_t value);
  void add_docids(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& docids() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_docids();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_docids() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_docids();

  public:
  // @@protoc_insertion_point(class_scope:SearchResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SearchResponse& from_msg);
    ::google::protobuf::RepeatedField<::int32_t> docids_;
    ::google::protobuf::internal::CachedSize _docids_cached_byte_size_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_search_2eproto;
};
// -------------------------------------------------------------------

class SearchRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:SearchRequest) */ {
 public:
  inline SearchRequest() : SearchRequest(nullptr) {}
  ~SearchRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SearchRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SearchRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SearchRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SearchRequest(const SearchRequest& from) : SearchRequest(nullptr, from) {}
  inline SearchRequest(SearchRequest&& from) noexcept
      : SearchRequest(nullptr, std::move(from)) {}
  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRequest& operator=(SearchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRequest*>(
        &_SearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(SearchRequest& a, SearchRequest& b) { a.Swap(&b); }
  inline void Swap(SearchRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SearchRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SearchRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SearchRequest& from) { SearchRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SearchRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "SearchRequest"; }

 protected:
  explicit SearchRequest(::google::protobuf::Arena* arena);
  SearchRequest(::google::protobuf::Arena* arena, const SearchRequest& from);
  SearchRequest(::google::protobuf::Arena* arena, SearchRequest&& from) noexcept
      : SearchRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kContentFieldNumber = 2,
    kModeFieldNumber = 1,
  };
  // string content = 2;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // .SearchMode mode = 1;
  void clear_mode() ;
  ::SearchMode mode() const;
  void set_mode(::SearchMode value);

  private:
  ::SearchMode _internal_mode() const;
  void _internal_set_mode(::SearchMode value);

  public:
  // @@protoc_insertion_point(class_scope:SearchRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      29, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SearchRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr content_;
    int mode_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_search_2eproto;
};
// -------------------------------------------------------------------

class GetNewsResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GetNewsResponse) */ {
 public:
  inline GetNewsResponse() : GetNewsResponse(nullptr) {}
  ~GetNewsResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetNewsResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetNewsResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetNewsResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetNewsResponse(const GetNewsResponse& from) : GetNewsResponse(nullptr, from) {}
  inline GetNewsResponse(GetNewsResponse&& from) noexcept
      : GetNewsResponse(nullptr, std::move(from)) {}
  inline GetNewsResponse& operator=(const GetNewsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNewsResponse& operator=(GetNewsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNewsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNewsResponse* internal_default_instance() {
    return reinterpret_cast<const GetNewsResponse*>(
        &_GetNewsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(GetNewsResponse& a, GetNewsResponse& b) { a.Swap(&b); }
  inline void Swap(GetNewsResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNewsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNewsResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetNewsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetNewsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetNewsResponse& from) { GetNewsResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetNewsResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "GetNewsResponse"; }

 protected:
  explicit GetNewsResponse(::google::protobuf::Arena* arena);
  GetNewsResponse(::google::protobuf::Arena* arena, const GetNewsResponse& from);
  GetNewsResponse(::google::protobuf::Arena* arena, GetNewsResponse&& from) noexcept
      : GetNewsResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNewsFieldNumber = 1,
  };
  // repeated string news = 1;
  int news_size() const;
  private:
  int _internal_news_size() const;

  public:
  void clear_news() ;
  const std::string& news(int index) const;
  std::string* mutable_news(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_news(int index, Arg_&& value, Args_... args);
  std::string* add_news();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_news(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& news() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_news();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_news() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_news();

  public:
  // @@protoc_insertion_point(class_scope:GetNewsResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      28, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetNewsResponse& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> news_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_search_2eproto;
};
// -------------------------------------------------------------------

class GetNewsRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GetNewsRequest) */ {
 public:
  inline GetNewsRequest() : GetNewsRequest(nullptr) {}
  ~GetNewsRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetNewsRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetNewsRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetNewsRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetNewsRequest(const GetNewsRequest& from) : GetNewsRequest(nullptr, from) {}
  inline GetNewsRequest(GetNewsRequest&& from) noexcept
      : GetNewsRequest(nullptr, std::move(from)) {}
  inline GetNewsRequest& operator=(const GetNewsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNewsRequest& operator=(GetNewsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNewsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNewsRequest* internal_default_instance() {
    return reinterpret_cast<const GetNewsRequest*>(
        &_GetNewsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(GetNewsRequest& a, GetNewsRequest& b) { a.Swap(&b); }
  inline void Swap(GetNewsRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNewsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNewsRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetNewsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetNewsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetNewsRequest& from) { GetNewsRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetNewsRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "GetNewsRequest"; }

 protected:
  explicit GetNewsRequest(::google::protobuf::Arena* arena);
  GetNewsRequest(::google::protobuf::Arena* arena, const GetNewsRequest& from);
  GetNewsRequest(::google::protobuf::Arena* arena, GetNewsRequest&& from) noexcept
      : GetNewsRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDocIdsFieldNumber = 1,
  };
  // repeated int32 docIds = 1;
  int docids_size() const;
  private:
  int _internal_docids_size() const;

  public:
  void clear_docids() ;
  ::int32_t docids(int index) const;
  void set_docids(int index, ::int32_t value);
  void add_docids(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& docids() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_docids();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_docids() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_docids();

  public:
  // @@protoc_insertion_point(class_scope:GetNewsRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetNewsRequest& from_msg);
    ::google::protobuf::RepeatedField<::int32_t> docids_;
    ::google::protobuf::internal::CachedSize _docids_cached_byte_size_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_search_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SearchRequest

// .SearchMode mode = 1;
inline void SearchRequest::clear_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mode_ = 0;
}
inline ::SearchMode SearchRequest::mode() const {
  // @@protoc_insertion_point(field_get:SearchRequest.mode)
  return _internal_mode();
}
inline void SearchRequest::set_mode(::SearchMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:SearchRequest.mode)
}
inline ::SearchMode SearchRequest::_internal_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::SearchMode>(_impl_.mode_);
}
inline void SearchRequest::_internal_set_mode(::SearchMode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mode_ = value;
}

// string content = 2;
inline void SearchRequest::clear_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.ClearToEmpty();
}
inline const std::string& SearchRequest::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SearchRequest.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SearchRequest::set_content(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:SearchRequest.content)
}
inline std::string* SearchRequest::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:SearchRequest.content)
  return _s;
}
inline const std::string& SearchRequest::_internal_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.content_.Get();
}
inline void SearchRequest::_internal_set_content(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(value, GetArena());
}
inline std::string* SearchRequest::_internal_mutable_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* SearchRequest::release_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:SearchRequest.content)
  return _impl_.content_.Release();
}
inline void SearchRequest::set_allocated_content(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:SearchRequest.content)
}

// -------------------------------------------------------------------

// SearchResponse

// repeated int32 docIds = 1;
inline int SearchResponse::_internal_docids_size() const {
  return _internal_docids().size();
}
inline int SearchResponse::docids_size() const {
  return _internal_docids_size();
}
inline void SearchResponse::clear_docids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.docids_.Clear();
}
inline ::int32_t SearchResponse::docids(int index) const {
  // @@protoc_insertion_point(field_get:SearchResponse.docIds)
  return _internal_docids().Get(index);
}
inline void SearchResponse::set_docids(int index, ::int32_t value) {
  _internal_mutable_docids()->Set(index, value);
  // @@protoc_insertion_point(field_set:SearchResponse.docIds)
}
inline void SearchResponse::add_docids(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_docids()->Add(value);
  // @@protoc_insertion_point(field_add:SearchResponse.docIds)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& SearchResponse::docids() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:SearchResponse.docIds)
  return _internal_docids();
}
inline ::google::protobuf::RepeatedField<::int32_t>* SearchResponse::mutable_docids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:SearchResponse.docIds)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_docids();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
SearchResponse::_internal_docids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.docids_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* SearchResponse::_internal_mutable_docids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.docids_;
}

// -------------------------------------------------------------------

// GetNewsRequest

// repeated int32 docIds = 1;
inline int GetNewsRequest::_internal_docids_size() const {
  return _internal_docids().size();
}
inline int GetNewsRequest::docids_size() const {
  return _internal_docids_size();
}
inline void GetNewsRequest::clear_docids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.docids_.Clear();
}
inline ::int32_t GetNewsRequest::docids(int index) const {
  // @@protoc_insertion_point(field_get:GetNewsRequest.docIds)
  return _internal_docids().Get(index);
}
inline void GetNewsRequest::set_docids(int index, ::int32_t value) {
  _internal_mutable_docids()->Set(index, value);
  // @@protoc_insertion_point(field_set:GetNewsRequest.docIds)
}
inline void GetNewsRequest::add_docids(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_docids()->Add(value);
  // @@protoc_insertion_point(field_add:GetNewsRequest.docIds)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& GetNewsRequest::docids() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:GetNewsRequest.docIds)
  return _internal_docids();
}
inline ::google::protobuf::RepeatedField<::int32_t>* GetNewsRequest::mutable_docids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:GetNewsRequest.docIds)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_docids();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
GetNewsRequest::_internal_docids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.docids_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* GetNewsRequest::_internal_mutable_docids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.docids_;
}

// -------------------------------------------------------------------

// GetNewsResponse

// repeated string news = 1;
inline int GetNewsResponse::_internal_news_size() const {
  return _internal_news().size();
}
inline int GetNewsResponse::news_size() const {
  return _internal_news_size();
}
inline void GetNewsResponse::clear_news() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.news_.Clear();
}
inline std::string* GetNewsResponse::add_news() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_news()->Add();
  // @@protoc_insertion_point(field_add_mutable:GetNewsResponse.news)
  return _s;
}
inline const std::string& GetNewsResponse::news(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GetNewsResponse.news)
  return _internal_news().Get(index);
}
inline std::string* GetNewsResponse::mutable_news(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:GetNewsResponse.news)
  return _internal_mutable_news()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void GetNewsResponse::set_news(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_news()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:GetNewsResponse.news)
}
template <typename Arg_, typename... Args_>
inline void GetNewsResponse::add_news(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_news(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:GetNewsResponse.news)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GetNewsResponse::news() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:GetNewsResponse.news)
  return _internal_news();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GetNewsResponse::mutable_news() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:GetNewsResponse.news)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_news();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GetNewsResponse::_internal_news() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.news_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GetNewsResponse::_internal_mutable_news() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.news_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::SearchMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::SearchMode>() {
  return ::SearchMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // search_2eproto_2epb_2eh
