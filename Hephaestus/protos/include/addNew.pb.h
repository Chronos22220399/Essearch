// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: addNew.proto
// Protobuf C++ Version: 5.29.2

#ifndef addNew_2eproto_2epb_2eh
#define addNew_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_addNew_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_addNew_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_addNew_2eproto;
class NewInfo;
struct NewInfoDefaultTypeInternal;
extern NewInfoDefaultTypeInternal _NewInfo_default_instance_;
class ResultResponse;
struct ResultResponseDefaultTypeInternal;
extern ResultResponseDefaultTypeInternal _ResultResponse_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum Result : int {
  RESULT_FAILED = 0,
  RESULT_SUCCESS = 1,
  Result_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Result_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Result_IsValid(int value);
extern const uint32_t Result_internal_data_[];
constexpr Result Result_MIN = static_cast<Result>(0);
constexpr Result Result_MAX = static_cast<Result>(1);
constexpr int Result_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
Result_descriptor();
template <typename T>
const std::string& Result_Name(T value) {
  static_assert(std::is_same<T, Result>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Result_Name().");
  return Result_Name(static_cast<Result>(value));
}
template <>
inline const std::string& Result_Name(Result value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Result_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool Result_Parse(absl::string_view name, Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Result>(
      Result_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ResultResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ResultResponse) */ {
 public:
  inline ResultResponse() : ResultResponse(nullptr) {}
  ~ResultResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResultResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResultResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResultResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResultResponse(const ResultResponse& from) : ResultResponse(nullptr, from) {}
  inline ResultResponse(ResultResponse&& from) noexcept
      : ResultResponse(nullptr, std::move(from)) {}
  inline ResultResponse& operator=(const ResultResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultResponse& operator=(ResultResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResultResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResultResponse* internal_default_instance() {
    return reinterpret_cast<const ResultResponse*>(
        &_ResultResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ResultResponse& a, ResultResponse& b) { a.Swap(&b); }
  inline void Swap(ResultResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResultResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ResultResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResultResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResultResponse& from) { ResultResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ResultResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ResultResponse"; }

 protected:
  explicit ResultResponse(::google::protobuf::Arena* arena);
  ResultResponse(::google::protobuf::Arena* arena, const ResultResponse& from);
  ResultResponse(::google::protobuf::Arena* arena, ResultResponse&& from) noexcept
      : ResultResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kResultFieldNumber = 1,
  };
  // .Result result = 1;
  void clear_result() ;
  ::Result result() const;
  void set_result(::Result value);

  private:
  ::Result _internal_result() const;
  void _internal_set_result(::Result value);

  public:
  // @@protoc_insertion_point(class_scope:ResultResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResultResponse& from_msg);
    int result_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_addNew_2eproto;
};
// -------------------------------------------------------------------

class NewInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NewInfo) */ {
 public:
  inline NewInfo() : NewInfo(nullptr) {}
  ~NewInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NewInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NewInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NewInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline NewInfo(const NewInfo& from) : NewInfo(nullptr, from) {}
  inline NewInfo(NewInfo&& from) noexcept
      : NewInfo(nullptr, std::move(from)) {}
  inline NewInfo& operator=(const NewInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewInfo& operator=(NewInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewInfo* internal_default_instance() {
    return reinterpret_cast<const NewInfo*>(
        &_NewInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(NewInfo& a, NewInfo& b) { a.Swap(&b); }
  inline void Swap(NewInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NewInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NewInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NewInfo& from) { NewInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NewInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "NewInfo"; }

 protected:
  explicit NewInfo(::google::protobuf::Arena* arena);
  NewInfo(::google::protobuf::Arena* arena, const NewInfo& from);
  NewInfo(::google::protobuf::Arena* arena, NewInfo&& from) noexcept
      : NewInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTitleFieldNumber = 2,
    kAuthorPhotorFieldNumber = 3,
    kReferringFieldNumber = 4,
    kSourceFieldNumber = 5,
    kEditorFieldNumber = 6,
    kContentFieldNumber = 7,
    kDocIdFieldNumber = 1,
  };
  // string title = 2;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string author_photor = 3;
  void clear_author_photor() ;
  const std::string& author_photor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_author_photor(Arg_&& arg, Args_... args);
  std::string* mutable_author_photor();
  PROTOBUF_NODISCARD std::string* release_author_photor();
  void set_allocated_author_photor(std::string* value);

  private:
  const std::string& _internal_author_photor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_author_photor(
      const std::string& value);
  std::string* _internal_mutable_author_photor();

  public:
  // string referring = 4;
  void clear_referring() ;
  const std::string& referring() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_referring(Arg_&& arg, Args_... args);
  std::string* mutable_referring();
  PROTOBUF_NODISCARD std::string* release_referring();
  void set_allocated_referring(std::string* value);

  private:
  const std::string& _internal_referring() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_referring(
      const std::string& value);
  std::string* _internal_mutable_referring();

  public:
  // string source = 5;
  void clear_source() ;
  const std::string& source() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_source(Arg_&& arg, Args_... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* value);

  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(
      const std::string& value);
  std::string* _internal_mutable_source();

  public:
  // string editor = 6;
  void clear_editor() ;
  const std::string& editor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_editor(Arg_&& arg, Args_... args);
  std::string* mutable_editor();
  PROTOBUF_NODISCARD std::string* release_editor();
  void set_allocated_editor(std::string* value);

  private:
  const std::string& _internal_editor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_editor(
      const std::string& value);
  std::string* _internal_mutable_editor();

  public:
  // string content = 7;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // uint32 doc_id = 1;
  void clear_doc_id() ;
  ::uint32_t doc_id() const;
  void set_doc_id(::uint32_t value);

  private:
  ::uint32_t _internal_doc_id() const;
  void _internal_set_doc_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:NewInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      62, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NewInfo& from_msg);
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr author_photor_;
    ::google::protobuf::internal::ArenaStringPtr referring_;
    ::google::protobuf::internal::ArenaStringPtr source_;
    ::google::protobuf::internal::ArenaStringPtr editor_;
    ::google::protobuf::internal::ArenaStringPtr content_;
    ::uint32_t doc_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_addNew_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// NewInfo

// uint32 doc_id = 1;
inline void NewInfo::clear_doc_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.doc_id_ = 0u;
}
inline ::uint32_t NewInfo::doc_id() const {
  // @@protoc_insertion_point(field_get:NewInfo.doc_id)
  return _internal_doc_id();
}
inline void NewInfo::set_doc_id(::uint32_t value) {
  _internal_set_doc_id(value);
  // @@protoc_insertion_point(field_set:NewInfo.doc_id)
}
inline ::uint32_t NewInfo::_internal_doc_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.doc_id_;
}
inline void NewInfo::_internal_set_doc_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.doc_id_ = value;
}

// string title = 2;
inline void NewInfo::clear_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.ClearToEmpty();
}
inline const std::string& NewInfo::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NewInfo.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NewInfo::set_title(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NewInfo.title)
}
inline std::string* NewInfo::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:NewInfo.title)
  return _s;
}
inline const std::string& NewInfo::_internal_title() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.title_.Get();
}
inline void NewInfo::_internal_set_title(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(value, GetArena());
}
inline std::string* NewInfo::_internal_mutable_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* NewInfo::release_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NewInfo.title)
  return _impl_.title_.Release();
}
inline void NewInfo::set_allocated_title(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:NewInfo.title)
}

// string author_photor = 3;
inline void NewInfo::clear_author_photor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.author_photor_.ClearToEmpty();
}
inline const std::string& NewInfo::author_photor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NewInfo.author_photor)
  return _internal_author_photor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NewInfo::set_author_photor(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.author_photor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NewInfo.author_photor)
}
inline std::string* NewInfo::mutable_author_photor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_author_photor();
  // @@protoc_insertion_point(field_mutable:NewInfo.author_photor)
  return _s;
}
inline const std::string& NewInfo::_internal_author_photor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.author_photor_.Get();
}
inline void NewInfo::_internal_set_author_photor(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.author_photor_.Set(value, GetArena());
}
inline std::string* NewInfo::_internal_mutable_author_photor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.author_photor_.Mutable( GetArena());
}
inline std::string* NewInfo::release_author_photor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NewInfo.author_photor)
  return _impl_.author_photor_.Release();
}
inline void NewInfo::set_allocated_author_photor(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.author_photor_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.author_photor_.IsDefault()) {
    _impl_.author_photor_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:NewInfo.author_photor)
}

// string referring = 4;
inline void NewInfo::clear_referring() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.referring_.ClearToEmpty();
}
inline const std::string& NewInfo::referring() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NewInfo.referring)
  return _internal_referring();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NewInfo::set_referring(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.referring_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NewInfo.referring)
}
inline std::string* NewInfo::mutable_referring() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_referring();
  // @@protoc_insertion_point(field_mutable:NewInfo.referring)
  return _s;
}
inline const std::string& NewInfo::_internal_referring() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.referring_.Get();
}
inline void NewInfo::_internal_set_referring(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.referring_.Set(value, GetArena());
}
inline std::string* NewInfo::_internal_mutable_referring() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.referring_.Mutable( GetArena());
}
inline std::string* NewInfo::release_referring() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NewInfo.referring)
  return _impl_.referring_.Release();
}
inline void NewInfo::set_allocated_referring(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.referring_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.referring_.IsDefault()) {
    _impl_.referring_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:NewInfo.referring)
}

// string source = 5;
inline void NewInfo::clear_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_.ClearToEmpty();
}
inline const std::string& NewInfo::source() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NewInfo.source)
  return _internal_source();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NewInfo::set_source(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NewInfo.source)
}
inline std::string* NewInfo::mutable_source() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:NewInfo.source)
  return _s;
}
inline const std::string& NewInfo::_internal_source() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.source_.Get();
}
inline void NewInfo::_internal_set_source(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_.Set(value, GetArena());
}
inline std::string* NewInfo::_internal_mutable_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.source_.Mutable( GetArena());
}
inline std::string* NewInfo::release_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NewInfo.source)
  return _impl_.source_.Release();
}
inline void NewInfo::set_allocated_source(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.source_.IsDefault()) {
    _impl_.source_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:NewInfo.source)
}

// string editor = 6;
inline void NewInfo::clear_editor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.editor_.ClearToEmpty();
}
inline const std::string& NewInfo::editor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NewInfo.editor)
  return _internal_editor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NewInfo::set_editor(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.editor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NewInfo.editor)
}
inline std::string* NewInfo::mutable_editor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_editor();
  // @@protoc_insertion_point(field_mutable:NewInfo.editor)
  return _s;
}
inline const std::string& NewInfo::_internal_editor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.editor_.Get();
}
inline void NewInfo::_internal_set_editor(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.editor_.Set(value, GetArena());
}
inline std::string* NewInfo::_internal_mutable_editor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.editor_.Mutable( GetArena());
}
inline std::string* NewInfo::release_editor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NewInfo.editor)
  return _impl_.editor_.Release();
}
inline void NewInfo::set_allocated_editor(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.editor_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.editor_.IsDefault()) {
    _impl_.editor_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:NewInfo.editor)
}

// string content = 7;
inline void NewInfo::clear_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.ClearToEmpty();
}
inline const std::string& NewInfo::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NewInfo.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NewInfo::set_content(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NewInfo.content)
}
inline std::string* NewInfo::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:NewInfo.content)
  return _s;
}
inline const std::string& NewInfo::_internal_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.content_.Get();
}
inline void NewInfo::_internal_set_content(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(value, GetArena());
}
inline std::string* NewInfo::_internal_mutable_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* NewInfo::release_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:NewInfo.content)
  return _impl_.content_.Release();
}
inline void NewInfo::set_allocated_content(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:NewInfo.content)
}

// -------------------------------------------------------------------

// ResultResponse

// .Result result = 1;
inline void ResultResponse::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = 0;
}
inline ::Result ResultResponse::result() const {
  // @@protoc_insertion_point(field_get:ResultResponse.result)
  return _internal_result();
}
inline void ResultResponse::set_result(::Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ResultResponse.result)
}
inline ::Result ResultResponse::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Result>(_impl_.result_);
}
inline void ResultResponse::_internal_set_result(::Result value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::Result> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Result>() {
  return ::Result_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // addNew_2eproto_2epb_2eh
